### 12. Looking at Data

> class(plants)
[1] "data.frame"
> str(plants)
'data.frame':	5166 obs. of  10 variables:
 $ Scientific_Name     : Factor w/ 5166 levels "Abelmoschus",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Duration            : Factor w/ 8 levels "Annual","Annual, Biennial",..: NA 4 NA 7 7 NA 1 NA 7 7 ...
 $ Active_Growth_Period: Factor w/ 8 levels "Fall, Winter and Spring",..: NA NA NA 4 NA NA NA NA 4 NA ...
 $ Foliage_Color       : Factor w/ 6 levels "Dark Green","Gray-Green",..: NA NA NA 3 NA NA NA NA 3 NA ...
 $ pH_Min              : num  NA NA NA 4 NA NA NA NA 7 NA ...
 $ pH_Max              : num  NA NA NA 6 NA NA NA NA 8.5 NA ...
 $ Precip_Min          : int  NA NA NA 13 NA NA NA NA 4 NA ...
 $ Precip_Max          : int  NA NA NA 60 NA NA NA NA 20 NA ...
 $ Shade_Tolerance     : Factor w/ 3 levels "Intermediate",..: NA NA NA 3 NA NA NA NA 2 NA ...
 $ Temp_Min_F          : int  NA NA NA -43 NA NA NA NA -13 NA ...

> dim(plants)
[1] 5166   10
> nrow(plants)
[1] 5166
> ncol(plants)
[1] 10
> object.size(plants)
644232 bytes
> names(plants)
 [1] "Scientific_Name"      "Duration"             "Active_Growth_Period"
 [4] "Foliage_Color"        "pH_Min"               "pH_Max"              
 [7] "Precip_Min"           "Precip_Max"           "Shade_Tolerance"     
[10] "Temp_Min_F"          

> summary(plants)
                     Scientific_Name              Duration   
 Abelmoschus                 :   1   Perennial        :3031  
 Abelmoschus esculentus      :   1   Annual           : 682  
 Abies                       :   1   Annual, Perennial: 179  
 Abies balsamea              :   1   Annual, Biennial :  95  
 Abies balsamea var. balsamea:   1   Biennial         :  57  
 Abutilon                    :   1   (Other)          :  92  
 (Other)                     :5160   NA's             :1030  
           Active_Growth_Period      Foliage_Color      pH_Min          pH_Max      
 Spring and Summer   : 447      Dark Green  :  82   Min.   :3.000   Min.   : 5.100  
 Spring              : 144      Gray-Green  :  25   1st Qu.:4.500   1st Qu.: 7.000  
 Spring, Summer, Fall:  95      Green       : 692   Median :5.000   Median : 7.300  
 Summer              :  92      Red         :   4   Mean   :4.997   Mean   : 7.344  
 Summer and Fall     :  24      White-Gray  :   9   3rd Qu.:5.500   3rd Qu.: 7.800  
 (Other)             :  30      Yellow-Green:  20   Max.   :7.000   Max.   :10.000  
 NA's                :4334      NA's        :4334   NA's   :4327    NA's   :4327    
   Precip_Min      Precip_Max         Shade_Tolerance   Temp_Min_F    
 Min.   : 4.00   Min.   : 16.00   Intermediate: 242   Min.   :-79.00  
 1st Qu.:16.75   1st Qu.: 55.00   Intolerant  : 349   1st Qu.:-38.00  
 Median :28.00   Median : 60.00   Tolerant    : 246   Median :-33.00  
 Mean   :25.57   Mean   : 58.73   NA's        :4329   Mean   :-22.53  
 3rd Qu.:32.00   3rd Qu.: 60.00                       3rd Qu.:-18.00  
 Max.   :60.00   Max.   :200.00                       Max.   : 52.00  
 NA's   :4338    NA's   :4338                         NA's   :4328    

| summary() provides different output for each variable, depending on its class. For
| numeric data such as Precip_Min, summary() displays the minimum, 1st quartile, median,
| mean, 3rd quartile, and maximum.

| For categorical variables (called 'factor' variables in R), summary() displays the number
| of times each value (or 'level') occurs in the data. For example, each value of
| Scientific_Name only appears once, since it is unique to a specific plant. In contrast,
| the summary for Duration (also a factor variable) tells us that our dataset contains 3031
| Perennial plants, 682 Annual plants, etc.

> table(plants$Active_Growth_Period)	# same result as the count in summary()

Fall, Winter and Spring                  Spring         Spring and Fall 
                     15                     144                      10 
      Spring and Summer    Spring, Summer, Fall                  Summer 
                    447                      95                      92 
        Summer and Fall              Year Round 
                     24                       5 



### 13. Simulation
# seq()
> seq(0, 10, by = 0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0
[18]  8.5  9.0  9.5 10.0
> my_seq <- seq(5, 10, length = 30)
> my_seq
 [1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483  6.206897
 [9]  6.379310  6.551724  6.724138  6.896552  7.068966  7.241379  7.413793  7.586207
[17]  7.758621  7.931034  8.103448  8.275862  8.448276  8.620690  8.793103  8.965517
[25]  9.137931  9.310345  9.482759  9.655172  9.827586 10.000000

| we want to generate a sequence of
| integers from 1 to N, where N represents the length of the my_seq vector. In other words,
| we want a new vector (1, 2, 3, ...) that is the same length as my_seq.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
[30] 30
> seq(along.with = my_seq)		# Alternative wat to achieve
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
[30] 30
> seq_along(my_seq)				# Alternative wat to achieve
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
[30] 30

# rep()
> rep(0, times = 20)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
> rep(c(0, 1, 2), times = 4)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2
> rep(c(0, 1, 2), each = 3)
 [1] 0 0 0 1 1 1 2 2 2




### 14. Dates and Times
| Dates are represented by the 'Date' class and times are represented by the 'POSIXct' and
| 'POSIXlt' classes. Internally, dates are stored as the number of days since 1970-01-01
| and times are stored as either the number of seconds since 1970-01-01 (for 'POSIXct') or
| a list of seconds, minutes, hours, etc. (for 'POSIXlt').
|
|	POSIXct is the signed number of seconds
|
| 	POSIXlt is one of many text | character | string formats such as:
| 	May 17, 2017
| 	17/5/2017
| 	17-5-17 05:24:39

> d1 <- Sys.Date()
> class(d1)
[1] "Date"
> unclass(d1)	# That's the exact number of days since 1970-01-01!
[1] 17016
> d1
[1] "2016-08-03"

> t1 <- Sys.time()
> t1
[1] "2016-08-03 19:19:13 PDT"
> class(t1)
[1] "POSIXct" "POSIXt" 

| As mentioned earlier, POSIXct is just one of two ways that R represents time information.
| (You can ignore the second value above, POSIXt, which just functions as a common language
| between POSIXct and POSIXlt.) Use unclass() to see what t1 looks like internally -- the
| (large) number of seconds since the beginning of 1970.

> unclass(t1)
[1] 1470277153

| By default, Sys.time() returns an object of class POSIXct, but we can coerce the result
| to POSIXlt with as.POSIXlt(Sys.time())

> t2 <- as.POSIXlt(Sys.time())
> class(t2)
[1] "POSIXlt" "POSIXt" 
> unclass(t2)
$sec
[1] 41.86089

$min
[1] 26

$hour
[1] 19

$mday
[1] 3

$mon
[1] 7

$year
[1] 116

$wday
[1] 3

$yday
[1] 215

$isdst
[1] 1

$zone
[1] "PDT"

$gmtoff
[1] -25200

attr(,"tzone")
[1] ""    "PST" "PDT"

> str(unclass(t2)) 
List of 11
 $ sec   : num 41.9
 $ min   : int 26
 $ hour  : int 19
 $ mday  : int 3
 $ mon   : int 7
 $ year  : int 116
 $ wday  : int 3
 $ yday  : int 215
 $ isdst : int 1
 $ zone  : chr "PDT"
 $ gmtoff: int -25200
 - attr(*, "tzone")= chr [1:3] "" "PST" "PDT"

> t2
[1] "2016-08-03 19:26:41 PDT"

> weekdays(d1)
[1] "Wednesday"
> months(t1)
[1] "August"
> quarters(t2)
[1] "Q3"

| strptime() converts character vectors to POSIXlt. In that sense, it is similar to
| as.POSIXlt(), except that the input doesn't have to be in a particular format
| (YYYY-MM-DD).

> t3 <- "October 17, 1986 08:24"
> t4 <- strptime(t3, "%B %d, %Y %H:%M")
> t4
[1] "1986-10-17 08:24:00 PDT"
> class(t4)
[1] "POSIXlt" "POSIXt" 

# Play around with times
> Sys.time() - t1
Time difference of 15.16798 mins
> difftime(Sys.time(), t1, units = 'days')
Time difference of 0.01100234 days




### 15. Plottings
# plot()
> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10
> plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
> plot(cars, main = "My Plot")
> plot(cars, sub = "My Plot Subtitle")
> plot(cars, col = 2)
> plot(cars, xlim = c(10, 15))
> plot(cars, pch = 2)		# plot triangles instead of default circle

# boxplot()
> head(mtcars)
                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> boxplot(formula = mpg ~ cyl, data = mtcars)

# hist()
> hist(mtcars$mpg)
> hist(mtcars$mpg, breaks= 10)		# how many buckets you need

