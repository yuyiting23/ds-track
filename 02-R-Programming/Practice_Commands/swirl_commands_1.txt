commands


### 0. Interective package: Swirl
> install.packages("swirl")
> library(swirl)
> swirl()

### 1. Basic building blocks
> list.files()
> dir()
> args() # args(list.files)



### 2. Workspace and files
> old.dir <- getwd()
> dir.create("testdir")
> setwd("testdir")
> getwd()
> file.create("mytest.R")
> file.exists("mytest.R")
> file.rename("mytest.R", to= "mytest2.R")
> file.copy("mytest2.R", to = "mytest3.R")

> dir.create(file.path('testdir2', 'testdir3', recursive = TRUE))
> unlink("testdir", recursive = TRUE)



### 3.Sequence and numbers
> pi:10
> ?`:`
> seq(1,20, by=0.5) 			 # case sensitive
> my_seq <- seq(5,10, length=30) # inclusive

> rep(0, times= 40)
> rep(c(0,2,1), times= 10)
> rep(c(0,1,2), each= 10)



### 4. Vectors
> my_char <- c("My", "name", "is")

> paste(my_char, collapse= " ")
[1] "My name is"

> my_name <- c(my_char ,"Yiting")
> my_name
[1] "My"     "name"   "is"     "Yiting"

> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

# Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character vector
> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3"
[12] "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2"
[23] "W-3" "X-4" "Y-1" "Z-2"




### 5. Missing Values
> y <- rnorm(100)
> z <- rep(NA, 100)
> my_data <- sample(c(y, z), 100)
> my_na <- is.na(my_data)
> my_data == NA 			# Same result
> sum(my_na)				# Important! All T's are interpreted as 1's, F's as 0's,
							# sum() will yield "the number of T's" of the object


### 6. Subsetting Vectors
# Suppose x is a vector of length 40, 20 numerics and 20 NAs
> is.na(x)			# Yield logical vector 
> y <- x[!is.na(x)]	# Get a subset of all the non-NA values
> y <- y[y>0]		# Get a subset of all positive values 
> x[!is.na(x) & x>0]# Get non-NA and positive values 
> x[c(-2,-10)]		# If we don't want 2nd and 10 elements
> x[-c(2,10)]		# Same result

# Names 
> vect <- c(foo= 11, bar =2 , norf = NA)
> names(vect)
> vect2 <- c(11,2,NA)
> names(vect2) <- c("foo", "bar", "norf")
> identical(vect, vect2)




### 7. Matrices and Data Frames
> my_vector
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  
> dim(my_vector)
NULL
> length(my_vector)
[1] 20
> dim(my_vector) <- c(4,5)	# Corerse it into a matrix with adding dimensions
> class(my_vector)
[1] "matrix"
> dim(my_vector)
[1] 4 5
> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
> attributes(my_vector)
$dim
[1] 4 5
> my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)

## Patient example
# If each row represents a patient, and we wannt to add the patients' names
> my_matrix
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
> patients <- c("Bill", "Gina", "Kelly", "Sean")

# No good ! 'implicit coercion'
> cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

# Use data.frame() to combine a vector and a matrix
> my_data <- data.frame(patients, my_matrix)
> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

# Name colums
> cnames <- c("patient", "age", "weight", "bp", "rating", "test")
> colnames(my_data) <- cnames
> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20



### 8. Logical
# AND
> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE
| What happens in this case is that the left operand `TRUE` is recycled across
| every element in the vector of the right operand. This is the equivalent
| statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE
| In this case, the left operand is only evaluated with the first member of the
| right operand (the vector). The rest of the elements in the vector aren't
| evaluated at all in this expression.

# Similarly, OR
| The OR operator follows a similar set of rules. The `|` version of OR
| evaluates OR across an entire vector, while the `||` version of OR only
| evaluates the first member of a vector.
> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE
> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

# All AND operators are evaluated before OR operators. Let's look
# at an example of an ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9
# 6 != 8 && 4 > 3.9  ==> TRUE && TRUE ==> TRUE
# 5 > 8 || TRUE ==> FALSE || TRUE ==> TRUE

> isTRUE(6 > 4)
[1] TRUE
> xor(5 == 6, !FALSE)	# xor(FALSE, TRUE) ==> TRUE
[1] TRUE

> ints <- sample(10)
> ints
[1]  4  1  6  3  5  2  7  8 10  9
> which(ints > 7)		# Produces the indices where matches the condition 
[1]  8  9 10
> any(ints < 0)
[1] FALSE
> all(ints>0)
[1] TRUE



### 9. Functions
> Sys.Date()
[1] "2016-08-02"

> args(remainder)
function (num, divisor = 2) 
NULL

# YES, you can pass functions as arguments!
evaluate <- function(func, dat){ 
  func(dat)
}
> evaluate(mean, dat = c(3,4,7,8,9))
[1] 6.2

# Anonymous function
> evaluate(function(x){x+1}, 6)
[1] 7
> evaluate(function(x){x[1]}, c(8, 4, 0))
[1] 8













